
&НаКлиенте
Перем ТекущаяСтрокаСпискаДоговоров;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ГПС_ОбщегоНазначенияКлиентСервер.ПолучитьЗначениеПраваГПСДополнительного(ПланыВидовХарактеристик.ПраваПользователей.ГПС_ОтображениеДоговоровВсехПодразделений)
	   И Не РольДоступна("ПолныеПрава") Тогда
		Элементы.ГруппаОтбор.Видимость = Ложь;
		ПодразделенияИнициатораМассив = БизнесПроцессы.ГПС_СогласованиеДоговора.ПолучитьПодразделениеПользователя(ОбщегоНазначения.ТекущийПользователь(), Истина);
		ПодразделенияИнициатора.ЗагрузитьЗначения(ПодразделенияИнициатораМассив);
		УстановитьГруппыДоступаКонтрагентов(); 
	Иначе
		Элементы.ГруппаОтбор.Видимость = Истина;
		СписокПодразделений = ГПС_СогласованиеДоговора.ПолучитьСохраненнуюНастройку("ГПС_ПодразделенияОтбораВМонитореДоговоров");
		Если СписокПодразделений <> Неопределено Тогда
			ПодразделенияИнициатора.ЗагрузитьЗначения(СписокПодразделений);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийГодМонитораДоговоров = ГПС_СогласованиеДоговора.ПолучитьСохраненнуюНастройку("ГПС_ТекущийГодМонитораДоговоров");
	ОтображатьИзбранные			= ГПС_СогласованиеДоговора.ПолучитьСохраненнуюНастройку("ГПС_ОтобрежениеИзбранныхМонитораДоговоров");
	
	Элементы.ИзбранныеДоговоры.Картинка = ?(ОтображатьИзбранные, БиблиотекаКартинок.ГПС_Избранное, БиблиотекаКартинок.ГПС_ИзбранноеЧБ);
	
	УстановитьКнопкиГод();
	
	СтрокаПоиска = СокрЛП(Параметры.СтрокаПоиска);
	
	ЗаполнитьДеревоДоговоров();
	
	РаскрытьВсеУровни = ГПС_СогласованиеДоговора.ПолучитьСохраненнуюНастройку("ГПС_СостояниеДереваМонитораДоговоров");
	Если РаскрытьВсеУровни = Ложь Тогда
		Элементы.Список.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать;
		Элементы.СвернутьРазвернутьДерево.Картинка = БиблиотекаКартинок.РазвернутьВсе;
	Иначе
		Элементы.Список.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
		Элементы.СвернутьРазвернутьДерево.Картинка = БиблиотекаКартинок.СвернутьВсе;
	КонецЕсли;
	
	УстановитьТекстНадписиОтбора();
	
	ПравоИзмененияТипа = ГПС_ОбщегоНазначенияКлиентСервер.ПолучитьЗначениеПраваГПСДополнительного(ПланыВидовХарактеристик.ПраваПользователей.ГПС_ИзменениеТиповДокументов);
	Если ПравоИзмененияТипа = Истина Тогда
		Элементы.СписокФайловКонтекстноеМенюУстановитьТипДокумента.Видимость = Истина;
		Элементы.СписокФайловКонтекстноеМенюПометитьФайлНаУдаление.Видимость = Истина;
		Элементы.СписокФайлов.РазрешитьНачалоПеретаскивания = Истина;
		Элементы.СписокФайлов.РазрешитьПеретаскивание = Истина;
	Иначе
		Элементы.СписокФайловКонтекстноеМенюУстановитьТипДокумента.Видимость = Ложь;
		Элементы.СписокФайловКонтекстноеМенюПометитьФайлНаУдаление.Видимость = Ложь;
		Элементы.СписокФайлов.РазрешитьНачалоПеретаскивания = Ложь;
		Элементы.СписокФайлов.РазрешитьПеретаскивание = Ложь;
	КонецЕсли;
	
	ПрикреплениеДокументовПоКонтрагенту = ГПС_ОбщегоНазначенияКлиентСервер.ПолучитьЗначениеПраваГПСДополнительного(ПланыВидовХарактеристик.ПраваПользователей.ГПС_ПрикреплениеДокументовБезСогласования);
	Если ПрикреплениеДокументовПоКонтрагенту = Истина Тогда
		Элементы.СписокКонтекстноеМенюПрикрепитьФайл.Видимость = Истина;
	Иначе
		Элементы.СписокКонтекстноеМенюПрикрепитьФайл.Видимость = Ложь;
	КонецЕсли;
	
	СписокЗаметок.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователи.ТекущийПользователь());
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаявок.Отбор, 				"ДоговорКонтрагента", Неопределено, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПроцессовСогласования.Отбор, "ДоговорКонтрагента", Неопределено, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	
	ОтобразитьЗаметки();
	ОтобразитьСобытия();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГруппыДоступаКонтрагентов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиПравДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа
	               |ИЗ
	               |	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	               |ГДЕ
	               |	НастройкиПравДоступаПользователей.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Контрагенты)
	               |	И НастройкиПравДоступаПользователей.ОбластьДанных = ЗНАЧЕНИЕ(Перечисление.ОбластиДанныхОбъектовДоступа.КонтрагентыДанные)
	               |	И НастройкиПравДоступаПользователей.Пользователь В
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				СоставГруппы.Ссылка КАК ГруппаПользователей
	               |			ИЗ
	               |				Справочник.ГруппыПользователей.ПользователиГруппы КАК СоставГруппы
	               |			ГДЕ
	               |				СоставГруппы.Пользователь = &ТекущийПользователь)";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ОбщегоНазначения.ТекущийПользователь());
	Результат = Запрос.Выполнить();
	
	ГруппаДоступаКонтрагента.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("ОбъектДоступа"));
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДоговоров()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДоговорыКонтрагентов.Ссылка КАК Договор,
				|	ВЫБОР КОГДА ДоговорыКонтрагентов.ГЭС_СтатусДоговора = ЗНАЧЕНИЕ(Перечисление.ГЭС_СтатусыДоговоров.Закрыт) ТОГДА 2
				|		  КОГДА ДоговорыКонтрагентов.ГЭС_СтатусДоговора = ЗНАЧЕНИЕ(Перечисление.ГЭС_СтатусыДоговоров.Действует) ТОГДА 1
				|	ИНАЧЕ 0 КОНЕЦ КАК СтатусДоговора,
				|	ДоговорыКонтрагентов.Владелец.ГПС_ВозможностьРаботыСЭДО КАК РаботаСЭДО,
				|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
				|	ВЫБОР
				|   		КОГДА ГПС_ИзбранныеДоговоры.Договор ЕСТЬ NULL ТОГДА ЛОЖЬ
				|	ИНАЧЕ ИСТИНА КОНЕЦ КАК Избранное
				| 
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|	" + ?(ОтображатьИзбранные, "ВНУТРЕННЕЕ", "ЛЕВОЕ") + " СОЕДИНЕНИЕ РегистрСведений.ГПС_ИзбранныеДоговоры КАК ГПС_ИзбранныеДоговоры
				|	ПО ГПС_ИзбранныеДоговоры.Договор = ДоговорыКонтрагентов.Ссылка
				|		И (ГПС_ИзбранныеДоговоры.Пользователь = &ТекущийПользователь)
				|ГДЕ
				|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
				|	" + ?(ТекущийГодМонитораДоговоров = Неопределено, "", " И ДоговорыКонтрагентов.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущийГод, ГОД) И КОНЕЦПЕРИОДА(&ТекущийГод, ГОД)") + "
				|	" + ?(ЗначениеЗаполнено(ПодразделенияИнициатора) И Элементы.ГруппаОтбор.Видимость, " И (ДоговорыКонтрагентов.ГЭС_Подразделение В(&Подразделения)
				|	)", "") + "
				|	" + ?(ЗначениеЗаполнено(СтрокаПоиска), " И (ДоговорыКонтрагентов.Наименование ПОДОБНО &ПодстрокаПоиска
				|			ИЛИ ДоговорыКонтрагентов.Владелец.Наименование ПОДОБНО &ПодстрокаПоиска) ", "") + "
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДоговорыКонтрагентов.Владелец.Наименование,
				|	ДоговорыКонтрагентов.Наименование
				|ИТОГИ ПО
				|	Контрагент";
	
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ОбщегоНазначения.ТекущийПользователь());
	Запрос.УстановитьПараметр("Подразделения", ПодразделенияИнициатора);
	Запрос.УстановитьПараметр("ТекущийГод", ТекущийГодМонитораДоговоров);
	Запрос.УстановитьПараметр("ПодстрокаПоиска", "%" + СтрокаПоиска + "%");
	Результат = Запрос.Выполнить();
	ВыборкаКонтрагент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоЗначенийДоговоров = РеквизитФормыВЗначение("ДеревоДоговоров", Тип("ДеревоЗначений"));
	
	ДеревоЗначенийДоговоров.Строки.Очистить();
	
	Пока ВыборкаКонтрагент.Следующий() Цикл
		СтрокаКонтрагент = ДеревоЗначенийДоговоров.Строки.Добавить();
		СтрокаКонтрагент.Договор = ВыборкаКонтрагент.Контрагент;
		СтрокаКонтрагент.Оформление = 0;
		СтрокаКонтрагент.ИндексКартинки = ?(ВыборкаКонтрагент.РаботаСЭДО, 2, 0);
		Выборка = ВыборкаКонтрагент.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаДоговор = СтрокаКонтрагент.Строки.Добавить();							
			СтрокаДоговор.Договор = Выборка.Договор;
			СтрокаДоговор.Оформление = 1;
			СтрокаДоговор.ИндексКартинки = ?(Выборка.Избранное, 3, 1);
			СтрокаДоговор.СтатусДоговора = Выборка.СтатусДоговора;
		КонецЦикла;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоЗначенийДоговоров, "ДеревоДоговоров");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКнопкиГод()

	МассивУдаляемыхКнопок = Новый Массив;
	
	Для Каждого ЭлементГод Из Элементы.ГруппаГоды.ПодчиненныеЭлементы Цикл
		Если ЭлементГод.Имя <> "Кнопка_Все" Тогда
			МассивУдаляемыхКнопок.Добавить(ЭлементГод.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КнопкаМассива Из МассивУдаляемыхКнопок Цикл 
		ИмяКоманды = Элементы[КнопкаМассива].ИмяКоманды;
		Элементы.Удалить(Элементы[КнопкаМассива]);
		Команды.Удалить(Команды[ИмяКоманды]);
	КонецЦикла;
	
	Элементы.Кнопка_Все.Пометка = Истина;	
	
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	НАЧАЛОПЕРИОДА(ДоговорыКонтрагентов.Дата, ГОД) КАК Период
	//			   |ИЗ
	//			   |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//			   |ГДЕ
	//			   |	ИСТИНА
	//			   |	" + ?(ЗначениеЗаполнено(ПодразделенияИнициатора), " И ДоговорыКонтрагентов.ГЭС_Подразделение В(&Подразделения) ", "") + "
	//			   |
	//			   |СГРУППИРОВАТЬ ПО
	//			   |	НАЧАЛОПЕРИОДА(ДоговорыКонтрагентов.Дата, ГОД)
	//			   |
	//			   |УПОРЯДОЧИТЬ ПО
	//			   |	Период УБЫВ";
	//
	//Запрос.УстановитьПараметр("Подразделения", ПодразделенияИнициатора);
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	НАЧАЛОПЕРИОДА(ДоговорыКонтрагентов.Дата, ГОД) КАК Период
				   |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
				   |	ИСТИНА
				   // {{%%%_GPS_AGusarov_04.12.17
				   //|	" + ?(ЗначениеЗаполнено(ПодразделенияИнициатора), " И (ДоговорыКонтрагентов.ГЭС_Подразделение В(&Подразделения) 
				   //|														ИЛИ (ДоговорыКонтрагентов.Владелец.ГруппаДоступаКонтрагента В (&ГруппаДоступаКонтрагента) 
				   //|															И ДоговорыКонтрагентов.Владелец.ГруппаДоступаКонтрагента <> ЗНАЧЕНИЕ(Справочник.ГруппыДоступаКонтрагентов.ПустаяСсылка))
				   //|	)", "") + "
				   |	" + ?(ЗначениеЗаполнено(СтрокаПоиска), " И (ДоговорыКонтрагентов.Наименование ПОДОБНО &ПодстрокаПоиска
				   |			ИЛИ ДоговорыКонтрагентов.Владелец.Наименование ПОДОБНО &ПодстрокаПоиска) ", "") + "
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	// {{%%%_GPS_AGusarov_04.12.17
	//Запрос.УстановитьПараметр("Подразделения", ПодразделенияИнициатора);
	//Запрос.УстановитьПараметр("ГруппаДоступаКонтрагента", ГруппаДоступаКонтрагента);
	Запрос.УстановитьПараметр("ТекущийГод", ТекущийГодМонитораДоговоров);
	Запрос.УстановитьПараметр("ПодстрокаПоиска", "%" + СтрокаПоиска + "%");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтрокаТекущийГод = ?(ЗначениеЗаполнено(ТекущийГодМонитораДоговоров), Формат(Год(ТекущийГодМонитораДоговоров), "ЧГ=0"), "");
	Пока Выборка.Следующий() Цикл
		СтрокаГод = ?(ЗначениеЗаполнено(Выборка.Период), Формат(Год(Выборка.Период), "ЧГ=0"), "БезДаты");
		
		КомандаКнопки = Команды.Добавить("ОтборПоГоду_" + СтрокаГод);
		КомандаКнопки.Действие = "ПоказатьПоГоду";
		
		ЭлементКнопка = Элементы.Добавить("Кнопка_" + СтрокаГод, Тип("КнопкаФормы"), Элементы.ГруппаГоды);
		ЭлементКнопка.ИмяКоманды = "ОтборПоГоду_" + СтрокаГод;
		ЭлементКнопка.Заголовок = ?(СтрокаГод = "БезДаты", "Без даты", СтрокаГод);
		
		Если СтрокаГод = СтрокаТекущийГод Тогда
			ЭлементКнопка.Пометка = Истина;
			Элементы.Кнопка_Все.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.Кнопка_Все.Пометка Тогда
		ТекущийГодМонитораДоговоров = Неопределено;
	КонецЕсли;

КонецПроцедуры // СтановитьКнопкиГод()

&НаКлиенте
Процедура СписокЗаявокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокЗаявок.ТекущиеДанные;
	
	Если НЕ НастройкаПравДоступаДополнительный.ГЭС_ПользовательВходитВГруппу("ГЭС_АдминистраторЗаявокНаРасходованиеСредств", ОбщегоНазначения.ТекущийПользователь(), Ложь) Тогда
		ОткрытьФорму("Документ.ЗаявкаНаРасходованиеСредств.Форма.ГЭС_ФормаЗаявкаНаПлатеж", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
    Иначе
		ОткрытьФорму("Документ.ЗаявкаНаРасходованиеСредств.Форма.ГЭС_ФормаДокумента", Новый Структура("Ключ", ТекущиеДанные.Ссылка));	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Ожидание = 2;
	СтрокаПоиска = Текст;
	ПерезаполнитьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДерево()
	
	ЗаполнитьДеревоДоговоров();
	
	Если РаскрытьВсеУровни Тогда
		ЭлементыДереваДоговоров = ДеревоДоговоров.ПолучитьЭлементы();
		Для Каждого СтрокаДерева Из ЭлементыДереваДоговоров Цикл
			Элементы.Список.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокументОтчетаНаСервере()

	ТабДок = Новый ТабличныйДокумент;
	
	ВедомостьПоВзаиморасчетам = РеквизитФормыВЗначение("ОтчетПоВзаиморасчетам");
	ВедомостьПоВзаиморасчетам.УстановитьНачальныеНастройки();
	ВедомостьПоВзаиморасчетам.СформироватьОтчет(ТабДок);
	
	Возврат ТабДок;

КонецФункции // ПолучитьТабличныйДокументОтчета()

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьОтчет();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчет()

	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект 	  = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("СхемаКомпоновкиДанных");
	ДанныеРасшифровки 	  = Новый ДанныеРасшифровкиКомпоновкиДанных;
	Настройки			  = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	СписокКонтрагентов = Новый СписокЗначений;
	СписокДоговоров    = Новый СписокЗначений;
	
	Для Каждого ЭлементВыделения Из ВыделенныеСтроки Цикл
		
		ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ЭлементВыделения).Договор;
		
		Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокКонтрагентов.Добавить(ВыбраннаяСтрока);
		ИначеЕсли ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокДоговоров.Добавить(ВыбраннаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ГруппаОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;	
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокКонтрагентов;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента");
	ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокДоговоров;	
	
	//ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Подразделение");
	//ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.ВСписке;
	//ЭлементОтбора.ПравоеЗначение = ПодразделенияИнициатора;	
	
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		ГруппаОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Иначе
		ГруппаОтбора = Настройки.Отбор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Период");
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НачалоДня(НачалоПериода);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Период");
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = КонецДня(КонецПериода);	
	КонецЕсли;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ТабличныйДокументВзаиморасчетов.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокументВзаиморасчетов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры // СформироватьОтчет()

&НаСервере
Процедура ЗаполнитьДеревоФайлов()
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;
	
	ДеревоФайлов = РеквизитФормыВЗначение("СписокФайлов", Тип("ДеревоЗначений"));
	ГПС_ФайловыеФункцииКлиентСервер.ЗаполнитьДеревоФайлов(ВыбраннаяСтрока, ДеревоФайлов, ?(ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.Контрагенты"), Справочники.ГПС_ТипыПрикрепленныхДокументов.ДокументыПоКонтрагентам, Неопределено));
	
	ЗначениеВРеквизитФормы(ДеревоФайлов, "СписокФайлов");
	
КонецПроцедуры // ЗаполнитьДеревоФайлов()

&НаСервере
Процедура ДобавитьЭлементыДерева(СтрокиДерева, ТаблицаФайлов, ФайлРодитель)

	//Заполнение иерархии по родительским файлам
	//НайденныеСтроки = ТаблицаФайлов.НайтиСтроки(Новый Структура("ФайлРодитель", ФайлРодитель));
	//
	//Для Каждого СтрокаМассива Из НайденныеСтроки Цикл
	//	НоваяСтрока = СтрокиДерева.Добавить();
	//	НоваяСтрока.Файл = СтрокаМассива.Ссылка;
	//	НоваяСтрока.Картинка = ПолучитьКартинкуПоИндексу(СтрокаМассива.ИндексКартинки);
	//	НоваяСтрока.ТипДокумента = СтрокаМассива.ТипДокумента;
	//	НоваяСтрока.Наименование = Строка(СтрокаМассива.Ссылка) + ?(СтрокаМассива.ТекущаяВерсияНомерВерсии > 1, " (Версия " + СтрокаМассива.ТекущаяВерсияНомерВерсии + ")", "");
	//	ДобавитьЭлементыДерева(НоваяСтрока.Строки, ТаблицаФайлов, СтрокаМассива.Ссылка)
	//КонецЦикла;
	                                                       
	СтрокаПриложения = СтрокиДерева.Добавить();
	СтрокаПриложения.Картинка = 2;
	СтрокаПриложения.Файл = "Приложения";
	
	ПрочиеФайлы = СтрокиДерева.Добавить();
	ПрочиеФайлы.Картинка = 2;
	ПрочиеФайлы.Файл = "Прочие файлы";
	
	ДоговорПомещенВДерево = Ложь;
	Для Каждого СтрокаМассива Из ТаблицаФайлов Цикл
		Если СтрокаМассива.ТипДокумента = Справочники.ГПС_ТипыПрикрепленныхДокументов.Приложение Тогда
			НоваяСтрока = СтрокаПриложения.Строки.Добавить();
		ИначеЕсли СтрокаМассива.ТипДокумента = Справочники.ГПС_ТипыПрикрепленныхДокументов.ДополнительнаяИнформация Тогда
		 	НоваяСтрока = ПрочиеФайлы.Строки.Добавить();
		ИначеЕсли СтрокаМассива.ТипДокумента = Справочники.ГПС_ТипыПрикрепленныхДокументов.Договор Тогда
		 	НоваяСтрока = СтрокиДерева.Вставить(0);
			ДоговорПомещенВДерево = Истина;
		ИначеЕсли СтрокаМассива.ТипДокумента = Справочники.ГПС_ТипыПрикрепленныхДокументов.ЛистСогласования Тогда
		 	НоваяСтрока = СтрокиДерева.Вставить(?(ДоговорПомещенВДерево, 1, 0));
		Иначе
			НоваяСтрока = СтрокиДерева.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Файл = СтрокаМассива.Ссылка;
		НоваяСтрока.Картинка = СтрокаМассива.ИндексКартинки;
		НоваяСтрока.ТипДокумента = СтрокаМассива.ТипДокумента;
		НоваяСтрока.Версия = "Версия " + СтрокаМассива.ТекущаяВерсияНомерВерсии;
	КонецЦикла;	
	
КонецПроцедуры // ДобавитьЭлементыДерева()

&НаСервере
Процедура УстановитьОтборПоЗаявкам()

	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаявок.Отбор, "ДоговорКонтрагента", ВыбраннаяСтрока, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаявок.Отбор, "Ссылка", , , , Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаявок.Отбор, "Ссылка", Неопределено, 	ВидСравненияКомпоновкиДанных.Равно, , Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборПоЗаявкам()

&НаСервере
Процедура УстановитьОтборПоПроцессамСогласования()

	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПроцессовСогласования.Отбор, "ДоговорКонтрагента", ВыбраннаяСтрока, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПроцессовСогласования.Отбор, "Контрагент", , , , Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПроцессовСогласования.Отбор, "ДоговорКонтрагента", , , , Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПроцессовСогласования.Отбор, "Контрагент", ВыбраннаяСтрока, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборПоЗаявкам()


&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока);
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ГПС_ФормаЭлементаДляПросмотра", ПараметрыФормы);	
	ИначеЕсли ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	СтрокаПоиска = "";
	ПерезаполнитьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;	
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	Если ИмяКаталога = Неопределено ИЛИ ПустаяСтрока(ИмяКаталога) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйФайл = Элемент.ТекущиеДанные.Файл;
	
	Если Не ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		Возврат;		
	КонецЕсли;
	
	ДанныеФайла = ГПС_РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ВыбранныйФайл, 
		Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	
	ГПС_РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Список.ТекущаяСтрока = ТекущаяСтрокаСпискаДоговоров Тогда
		Возврат;
	Иначе
		ТекущаяСтрокаСпискаДоговоров = Элементы.Список.ТекущаяСтрока;
	КонецЕсли;
	
	Если Элементы.ГруппаИнформацияПоДоговору.ТекущаяСтраница = Элементы.Файлы Тогда
		ЗаполнитьДеревоФайлов();
		ЭлементыДереваФайлов = СписокФайлов.ПолучитьЭлементы();
	
		Для Каждого СтрокаДерева Из ЭлементыДереваФайлов Цикл
			Элементы.СписокФайлов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	ИначеЕсли Элементы.ГруппаИнформацияПоДоговору.ТекущаяСтраница = Элементы.ЗаявкиНаПлатеж Тогда
		УстановитьОтборПоЗаявкам();
	ИначеЕсли Элементы.ГруппаИнформацияПоДоговору.ТекущаяСтраница = Элементы.СтраницаПроцессы Тогда
		УстановитьОтборПоПроцессамСогласования();
	ИначеЕсли Элементы.ГруппаИнформацияПоДоговору.ТекущаяСтраница = Элементы.СтраницаЗаметки Тогда
		ОтобразитьЗаметки();
	ИначеЕсли Элементы.ГруппаИнформацияПоДоговору.ТекущаяСтраница = Элементы.СтраницаСобытия Тогда
		ОтобразитьСобытия();
	КонецЕсли;
	
	ТабличныйДокументВзаиморасчетов.Очистить();
	Элементы.СписокКонтекстноеМенюОткрытьПроцессСогласования.Доступность = (ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка"));
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		Если Элементы.Список.ТекущиеДанные.ИндексКартинки = 1 Тогда
			Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Видимость = Истина;
			Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Картинка  = БиблиотекаКартинок.ГПС_Избранное;
			Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Заголовок = "Добавить в избранное";
			Элементы.СписокКонтекстноеМенюУчастникЭДО.Видимость = Ложь;
		ИначеЕсли Элементы.Список.ТекущиеДанные.ИндексКартинки = 3 Тогда
			Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Видимость = Истина;
			Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Картинка  = БиблиотекаКартинок.ГПС_ИзбранноеЧБ;
			Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Заголовок = "Удалить из избранного";
			Элементы.СписокКонтекстноеМенюУчастникЭДО.Видимость = Ложь;
		ИначеЕсли Элементы.Список.ТекущиеДанные.ИндексКартинки = 0 Или Элементы.Список.ТекущиеДанные.ИндексКартинки = 2 Тогда
			Элементы.СписокКонтекстноеМенюУчастникЭДО.Видимость = Истина;
			Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЗаметки()

	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		ТекущийПредмет = ДеревоДоговоров.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока).Договор;
	Иначе
		ТекущийПредмет = NULL;		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаметок.Отбор, "Предмет", ТекущийПредмет, , , Истина);
	
КонецПроцедуры // ОтобразитьЗаметки()

&НаСервере
Процедура ОтобразитьСобытия()

	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		ТекущийПредмет = ДеревоДоговоров.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока).Договор;
	Иначе
		ТекущийПредмет = NULL;		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СобытияПоДоговору.Отбор, 	"Владелец", 			ТекущийПредмет, , , Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗадачиСобытий.Отбор, 		"ДоговорКонтрагента", 	ТекущийПредмет, , , Истина);
	
	//ЗаполнитьПолеКалендаря(ТекущийПредмет);
	
КонецПроцедуры // ОтобразитьСобытия()

&НаСервере
Процедура ЗаполнитьПолеКалендаря(ДоговорКонтрагента, АктивнаяДата = Неопределено)

	УстановитьПривилегированныйРежим(Истина);
	МакетКалендаря = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетКалендаря");
	МакетКалендаряНеактивный = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетКалендаряНеактивный");
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	
	ПолеКалендаря.Очистить();
	ПолеКалендаряДо.Очистить();
	ПолеКалендаряПосле.Очистить();
	
	Макет = МакетКалендаряНеактивный.ПолучитьОбласть("ОбластьКалендаря");
	ЗаполнитьМакетКоландаряНаМесяц(Макет, ДобавитьМесяц(ТекущаяДата, -1), ДоговорКонтрагента, АктивнаяДата);
	ПолеКалендаряДо.Вывести(Макет);
	
	Макет = МакетКалендаря.ПолучитьОбласть("ОбластьКалендаря");
	ЗаполнитьМакетКоландаряНаМесяц(Макет, ТекущаяДата, ДоговорКонтрагента, АктивнаяДата);
	ПолеКалендаря.Вывести(Макет);
	
	Макет = МакетКалендаряНеактивный.ПолучитьОбласть("ОбластьКалендаря");
	ЗаполнитьМакетКоландаряНаМесяц(Макет, ДобавитьМесяц(ТекущаяДата, 1), ДоговорКонтрагента, АктивнаяДата);
	ПолеКалендаряПосле.Вывести(Макет);
	
КонецПроцедуры // ЗаполнитьПолеКалендаря()

&НаСервере
Процедура ЗаполнитьМакетКоландаряНаМесяц(Макет, ТекущаяДата, ДоговорКонтрагента, АктивнаяДата)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеПоСобытиям.ПериодСобытия,
	               |	ДанныеПоСобытиям.Ссылка,
	               |	СУММА(ДанныеПоСобытиям.Состояние) КАК Состояние
	               |ПОМЕСТИТЬ ВТ_ДанныеПоСобытиям
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДанныеТекущегоМесяца.ПериодСобытия КАК ПериодСобытия,
	               |		ДанныеТекущегоМесяца.Ссылка КАК Ссылка,
	               |		10 КАК Состояние
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ГПС_СобытияПоДоговорамКонтрегентам.ДатаНачала КАК ДатаНачала,
	               |			ВЫБОР
	               |				КОГДА ГПС_СобытияПоДоговорамКонтрегентам.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	               |					ТОГДА ДОБАВИТЬКДАТЕ(ГПС_СобытияПоДоговорамКонтрегентам.ДатаНачала, МЕСЯЦ, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ГПС_СобытияПоДоговорамКонтрегентам.ДатаНачала, МЕСЯЦ), НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ), МЕСЯЦ))
	               |				КОГДА ГПС_СобытияПоДоговорамКонтрегентам.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	               |					ТОГДА ДОБАВИТЬКДАТЕ(ГПС_СобытияПоДоговорамКонтрегентам.ДатаНачала, КВАРТАЛ, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ГПС_СобытияПоДоговорамКонтрегентам.ДатаНачала, КВАРТАЛ), НАЧАЛОПЕРИОДА(&ТекущаяДата, КВАРТАЛ), КВАРТАЛ))
	               |				КОГДА ГПС_СобытияПоДоговорамКонтрегентам.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	               |					ТОГДА ДОБАВИТЬКДАТЕ(ГПС_СобытияПоДоговорамКонтрегентам.ДатаНачала, ГОД, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ГПС_СобытияПоДоговорамКонтрегентам.ДатаНачала, ГОД), НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД), ГОД))
	               |				ИНАЧЕ NULL
	               |			КОНЕЦ КАК ПериодСобытия,
	               |			ГПС_СобытияПоДоговорамКонтрегентам.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Справочник.ГПС_СобытияПоДоговорамКонтрегентам КАК ГПС_СобытияПоДоговорамКонтрегентам
	               |		ГДЕ
	               |			ГПС_СобытияПоДоговорамКонтрегентам.Владелец = &ДоговорКонтрагента
	               |			И НЕ ГПС_СобытияПоДоговорамКонтрегентам.ПометкаУдаления) КАК ДанныеТекущегоМесяца
	               |	ГДЕ
	               |		ДанныеТекущегоМесяца.ПериодСобытия МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ГПС_ЗадачиПоРаботеСДоговорами.Дата,
	               |		ГПС_ЗадачиПоРаботеСДоговорами.Событие,
	               |		ВЫБОР
	               |			КОГДА ГПС_ЗадачиПоРаботеСДоговорами.Выполнена
	               |				ТОГДА 2
	               |			ИНАЧЕ 1
	               |		КОНЕЦ
	               |	ИЗ
	               |		Задача.ГПС_ЗадачиПоРаботеСДоговорами КАК ГПС_ЗадачиПоРаботеСДоговорами
	               |	ГДЕ
	               |		ГПС_ЗадачиПоРаботеСДоговорами.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала) КАК ДанныеПоСобытиям
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеПоСобытиям.ПериодСобытия,
	               |	ДанныеПоСобытиям.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	               |	ДЕНЬНЕДЕЛИ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДеньНедели,
	               |	НЕДЕЛЯ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) - НЕДЕЛЯ(&НачалоИнтервала) + 1 + ВЫБОР
	               |		КОГДА ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) > ГОД(&НачалоИнтервала)
	               |			ТОГДА НЕДЕЛЯ(КОНЕЦПЕРИОДА(&НачалоИнтервала, ГОД)) - 1
	               |		КОГДА ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) < ГОД(&НачалоИнтервала)
	               |			ТОГДА -НЕДЕЛЯ(КОНЕЦПЕРИОДА(&НачалоИнтервала, ГОД))
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК НомерНедели,
	               |	РегламентированныйПроизводственныйКалендарь.ВидДня КАК ВидДня,
	               |	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК МесяцСобытия
	               |ПОМЕСТИТЬ ВТ_ПроизводственныйКалендарь
	               |ИЗ
	               |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	               |ГДЕ
	               |	РегламентированныйПроизводственныйКалендарь.Год = &Год
	               |	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДатаКалендаря
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_ДанныеПоСобытиям.Состояние, 0) КАК Состояние,
	               |	ВТ_ПроизводственныйКалендарь.ДатаКалендаря,
	               |	ВТ_ПроизводственныйКалендарь.ДеньНедели,
	               |	ВТ_ПроизводственныйКалендарь.НомерНедели,
	               |	ВТ_ПроизводственныйКалендарь.ВидДня,
	               |	ВТ_ПроизводственныйКалендарь.МесяцСобытия
	               |ИЗ
	               |	ВТ_ПроизводственныйКалендарь КАК ВТ_ПроизводственныйКалендарь
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПоСобытиям КАК ВТ_ДанныеПоСобытиям
	               |		ПО ВТ_ПроизводственныйКалендарь.ДатаКалендаря = ВТ_ДанныеПоСобытиям.ПериодСобытия";
				   
	Запрос.УстановитьПараметр("ДоговорКонтрагента",	ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТекущаяДата",  			ТекущаяДата);
				   
	Запрос.УстановитьПараметр("НачалоИнтервала", 	НачалоНедели(НачалоМесяца(ТекущаяДата)));
	Запрос.УстановитьПараметр("КонецИнтервала",  	КонецНедели(НачалоМесяца(ТекущаяДата)) + 5*7*24*60*60);
	Запрос.УстановитьПараметр("Год",  					Год(НачалоГода(ТекущаяДата)));
	
	Результат = Запрос.Выполнить();
	Выборка 	= Результат.Выбрать();
	
	Макет.Параметры["ТекущийМесяц"] = Формат(ТекущаяДата, "ДФ='MMMM yyyy'");
	
	Пока Выборка.Следующий() Цикл
	 	ОбластьДаты = Макет.Области["_" + Выборка.ДеньНедели + "_" + Выборка.НомерНедели];
		ОбластьДаты.Значение = Выборка.ДатаКалендаря;
		
		Если Месяц(Выборка.ДатаКалендаря) <> Месяц(ТекущаяДата) Тогда
			ОбластьДаты.ЦветТекста = WebЦвета.НейтральноСерый;	
		ИначеЕсли Выборка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник 
			  Или Выборка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота 
			  Или Выборка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
			ОбластьДаты.ЦветТекста = WebЦвета.Красный;
			
		КонецЕсли;
		
		Если Выборка.Состояние <> 0 Тогда
			ОбластьДаты.ЦветФона = WebЦвета.Золотой;				
		КонецЕсли;
		
		Если НачалоДня(ТекущаяДата()) = Выборка.ДатаКалендаря Тогда
			ОбластьДаты.ЦветРамки = WebЦвета.Красный;
			ОбластьДаты.ГраницаСверху 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьДаты.ГраницаСлева  	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьДаты.ГраницаСнизу  	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьДаты.ГраницаСправа 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);	
		ИначеЕсли АктивнаяДата = Выборка.ДатаКалендаря Тогда
			ОбластьДаты.ЦветРамки = WebЦвета.ЛимонноЗеленый;
			ОбластьДаты.ГраницаСверху 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьДаты.ГраницаСлева  	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьДаты.ГраницаСнизу  	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьДаты.ГраницаСправа 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		Иначе
			ОбластьДаты.ГраницаСверху 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			ОбластьДаты.ГраницаСлева  	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			ОбластьДаты.ГраницаСнизу  	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			ОбластьДаты.ГраницаСправа 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		КонецЕсли;
		
	КонецЦикла;
	
	//Макет.Области["ТекущаяДата"].Текст = Формат(ТекущаяДата, "ДЛФ=DD");
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппаИнформацияПоДоговоруПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.Файлы Тогда
		ЗаполнитьДеревоФайлов();
		ЭлементыДереваФайлов = СписокФайлов.ПолучитьЭлементы();
	
		Для Каждого СтрокаДерева Из ЭлементыДереваФайлов Цикл
			Элементы.СписокФайлов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ЗаявкиНаПлатеж Тогда
		
		УстановитьОтборПоЗаявкам();			
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПроцессы Тогда
		
		УстановитьОтборПоПроцессамСогласования();	
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗаметки Тогда
		
		ОтобразитьЗаметки();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСобытия Тогда
		
		ОтобразитьСобытия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериода(Команда)
	
#Если ТонкийКлиент Тогда
	СтандартныйПериод = Новый СтандартныйПериод;
	СтандартныйПериод.ДатаНачала   = НачалоПериода;
	СтандартныйПериод.ДатаОкончания = КонецПериода;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = СтандартныйПериод;
	
	Если Диалог.Редактировать() Тогда 
		НачалоПериода = Диалог.Период.ДатаНачала;
		КонецПериода  = Диалог.Период.ДатаОкончания;
	КонецЕсли;
#Иначе
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.ДатаНачала = НачалоПериода;
	НастройкаПериода.ДатаОкончания = КонецПериода;
	Если НастройкаПериода.Редактировать() Тогда
		НачалоПериода = НастройкаПериода.ДатаНачала;
		КонецПериода  = НастройкаПериода.ДатаОкончания;
	КонецЕсли;	
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроцессСогласования(Команда)
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОснованиеТекущегоФайла = ПолучитьЗначениеРеквизита(ТекущиеДанные.Файл, "ГПС_Основание");
	
	Если Не ЗначениеЗаполнено(ОснованиеТекущегоФайла) Тогда
		
		Предупреждение("Данный документ не проходил процесс согласования");
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ОснованиеТекущегоФайла) = Тип("БизнесПроцессСсылка.ГПС_СогласованиеДоговора") Тогда
		ОткрытьФорму("БизнесПроцесс.ГПС_СогласованиеДоговора.Форма.ФормаБизнесПроцесса", Новый Структура("Ключ", ОснованиеТекущегоФайла));
	ИначеЕсли ТипЗнч(ОснованиеТекущегоФайла) = Тип("БизнесПроцессСсылка.ГПС_СогласованиеПлатежа") Тогда
		ОткрытьФорму("БизнесПроцесс.ГПС_СогласованиеПлатежа.Форма.ФормаЗаявки", Новый Структура("Ключ", ОснованиеТекущегоФайла));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуБизнесПроцессов(ДоговорКонтрагента)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	Файлы.Ссылка,
					|	Файлы.ГПС_Основание КАК Основание,
					|	Файлы.ИндексКартинки
					|ИЗ
					|	Справочник.Файлы КАК Файлы
					|ГДЕ
					|	Файлы.ГПС_Основание.ОсновнойФайл = Файлы.Ссылка
					|	И Файлы.ВладелецФайла = &ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();		

КонецФункции // ОткрытьФормуВыбораПроцессаНаСервере()

&НаКлиенте
Процедура РаспечататьЗаявкуНаПлатеж(Команда)
	
	СтруктураОтчета = ПолучитьСтруктуруОтчета();
	
	ОтчетОбъект = ПолучитьФорму("Отчет.ГЭС_ЗаявкаНаПлатеж.Форма.Форма", СтруктураОтчета, , Истина);
	ЗаполнитьЗначенияСвойств(ОтчетОбъект, СтруктураОтчета);
	
	ОтчетОбъект.Открыть();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОтчета()

	Перем Контрагент, ДоговорКонтрагента;
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	//Если ТекущаяСтрока = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Контрагент = ВыбраннаяСтрока.Владелец;
		ДоговорКонтрагента = ВыбраннаяСтрока;
	Иначе
		Контрагент = ВыбраннаяСтрока;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("ДатаФормирования", ТекущаяДата());
	СтруктураРеквизитов.Вставить("Организация", Справочники.Организации.ГазпромСера);
	СтруктураРеквизитов.Вставить("Получатель", Контрагент);
	СтруктураРеквизитов.Вставить("Договор", ДоговорКонтрагента);
	ПодразделениеПользователя = БизнесПроцессы.ГПС_СогласованиеДоговора.ПолучитьПодразделениеПользователя(ОбщегоНазначения.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("ЦФО", ПодразделениеПользователя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Физлицо КАК Физлицо
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	               |			,
	               |			Сотрудник.Физлицо = &Физлицо
	               |				И Организация = ЗНАЧЕНИЕ(Справочник.Организации.Газпромсера)) КАК РаботникиОрганизацийСрезПоследних
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ВЫБОР
	               |					КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	               |							И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ТекущаяДата
	               |						ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения
	               |					ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность
	               |				КОНЕЦ = &НачальникОтдела
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Пользователи.ФизЛицо КАК ФизЛицо
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛица.СрезПоследних(, СтруктурнаяЕдиница = &Подразделение) КАК ОтветственныеЛицаСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	               |		ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = Пользователи.ФизЛицо";
	
	Запрос.УстановитьПараметр("Подразделение", 	СтруктураРеквизитов.ЦФО);
	Запрос.УстановитьПараметр("Физлицо", 		ОбщегоНазначения.ТекущийПользователь().ФизЛицо);
	Запрос.УстановитьПараметр("НачальникОтдела", 	Справочники.ДолжностиОрганизаций.НайтиПоКоду("000000026"));
	Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДата());
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураРеквизитов.Вставить("РуководительПодразделения", Выборка.ФизЛицо);
	Иначе
		ВыборкаРководитель = Результат[1].Выбрать();
		Если ВыборкаРководитель.Следующий() Тогда
			СтруктураРеквизитов.Вставить("РуководительПодразделения", ВыборкаРководитель.ФизЛицо);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) Тогда
		СтруктураРеквизитов.Вставить("РасчетныйСчет", Контрагент.ОсновнойБанковскийСчет);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
						|	БанковскиеСчета.Ссылка
						|ИЗ
						|	Справочник.БанковскиеСчета КАК БанковскиеСчета
						|ГДЕ
						|	БанковскиеСчета.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
			СтруктураРеквизитов.Вставить("РасчетныйСчет", Выборка.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;

КонецФункции // ПолучитьФормуЗаполненногоОтчета()

&НаКлиенте
Процедура ТабличныйДокументВзаиморасчетовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СхемаКомпоновкиДанных = ПолучитьСхемуКомпоновкиДанных();
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		
	Попытка
	ОбработкаРасшифровки.ОткрытьЗначение(Расшифровка, Новый ПолеКомпоновкиДанных("Регистратор"));
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСхемуКомпоновкиДанных()
	
	ОбработкаОбъект 	  = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет("СхемаКомпоновкиДанных");
	
КонецФункции // ПолучитьРезультатРасшифровкиДанных()

#Область Удаленные_Процедуры

//&НаКлиенте
//Процедура КомментарийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
//	
//	ЗаписатьКомментарий(Текст);		
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗаписатьКомментарий(Текст)

//	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

//	Если ТекущаяСтрока = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЭлементСсылка = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;			

//	Если Текст <> ЭлементСсылка.Комментарий Тогда
//		ЭлементОбъект = ЭлементСсылка.Получитьобъект();
//		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
//		ЭлементОбъект.Комментарий = Текст;
//		ЭлементОбъект.Записать();
//	КонецЕсли;

//КонецПроцедуры // ЗаписатьКомментарий()

//&НаСервере
//Процедура УстановитьТипФайла(НовыйФайл, СтруктураТипаФайла)

//	ФайлОбъект = НовыйФайл.ПолучитьОбъект();
//	ФайлОбъект.ОбменДанными.Загрузка = Истина;
//	ФайлОбъект.ГПС_ТипДокумента 	 = СтруктураТипаФайла.ТипДокумента;
//	ФайлОбъект.ГПС_НомерДокумента  	 = СтруктураТипаФайла.СледующийНомер;
//	ФайлОбъект.ГПС_ДатаДокумента  	 = СтруктураТипаФайла.ДатаДокумента;
//	
//	ФайлОбъект.ГПС_ДополнительноеПредставление = СтруктураТипаФайла.ДополнительноеПредставление;	
//	ФайлОбъект.ГПС_ФайлРодитель 			   = Справочники.Файлы.ПустаяСсылка();
//	
//	ФайлОбъект.Записать();

//КонецПроцедуры // УстановитьТипФайла()

#КонецОбласти

&НаСервере
Процедура УстановитьТекстНадписиОтбора()
	
	Если ПодразделенияИнициатора.Количество() = 0 Тогда
		Элементы.ДекорацияОтбор.Заголовок = "<Все подразделения>";
	ИначеЕсли ПодразделенияИнициатора.Количество() = 1 Тогда
		Элементы.ДекорацияОтбор.Заголовок = Строка(ПодразделенияИнициатора[0].Значение);
	Иначе 
		Элементы.ДекорацияОтбор.Заголовок = "Насколько подразделений (" + ПодразделенияИнициатора.Количество() + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборНажатие(Элемент)
	
	МассивПодразделений = ОткрытьФормуМодально("Обработка.ГПС_МониторДоговоров.Форма.ФормаВыбораПодразделений", Новый Структура("СписокПодразделений", ПодразделенияИнициатора));
	Если МассивПодразделений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделенияИнициатора.ЗагрузитьЗначения(МассивПодразделений);

	УстановитьТекстНадписиОтбора();
	
	УстановитьКнопкиГод();
	
	ПерезаполнитьДерево();
	
	ГПС_СогласованиеДоговора.ЗаписатьНастройку("ГПС_ПодразделенияОтбораВМонитореДоговоров", МассивПодразделений);	
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьДерево(Команда)
	
	РаскрытьВсеУровни = Не РаскрытьВсеУровни;
	
	ЭлементыДереваДоговоров = ДеревоДоговоров.ПолучитьЭлементы();
	Если РаскрытьВсеУровни Тогда
		Элементы.Список.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
		Для Каждого СтрокаДерева Из ЭлементыДереваДоговоров Цикл
			Элементы.Список.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Элементы.СвернутьРазвернутьДерево.Картинка = БиблиотекаКартинок.СвернутьВсе;
	Иначе
		Элементы.Список.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать;
		Для Каждого СтрокаДерева Из ЭлементыДереваДоговоров Цикл
			Элементы.Список.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Элементы.СвернутьРазвернутьДерево.Картинка = БиблиотекаКартинок.РазвернутьВсе;
	КонецЕсли;
	
	ГПС_СогласованиеДоговора.ЗаписатьНастройку("ГПС_СостояниеДереваМонитораДоговоров", РаскрытьВсеУровни);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьАрхивныеВерсии(Команда)
	
	ФормаСписка = ОткрытьФорму("ОбщаяФорма.ГПС_ФормаАрхиваФайлов", Новый Структура("Владелец", Элементы.СписокФайлов.ТекущиеДанные.Файл));
	
	Если ФормаСписка = Неопределено Тогда
		Предупреждение("Другие версии данного файла отсутствуют!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьБП(Команда)
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("БизнесПроцесс.ГПС_СогласованиеДоговора.Форма.ФормаБизнесПроцесса", Новый Структура("Ключ", ПолучитьЗначениеРеквизита(ТекущиеДанные.Файл, "ГПС_Основание")));	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипДокумента(Команда)
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Или ТекущаяСтрока = Неопределено Тогда
		Возврат;
	Иначе
		ТекущийФайл = ТекущиеДанные.Файл;	
	КонецЕсли;
	
	Если Не ПроверитьВозможностьСменыТипа(ТекущийФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("Родитель", ПредопределенноеЗначение("Справочник.ГПС_ТипыПрикрепленныхДокументов.ДокументыСогласования"));
	ПараметрыФормы.Вставить("ТекущийФайл", ТекущийФайл);
	
	СтруктураТипаФайла = ОткрытьФормуМодально("Справочник.Файлы.Форма.ГПС_ФормаПараметровДокумента", ПараметрыФормы);
	
	Если СтруктураТипаФайла = Неопределено Тогда
		Возврат;
	Иначе
		ГПС_ФайловыеФункцииКлиентСервер.УстановитьТипФайла(ТекущийФайл, СтруктураТипаФайла);
	КонецЕсли;
	
	ОбновитьДеревоФайлов();	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьСменыТипа(ТекущийФайл)

	Если ЗначениеЗаполнено(ТекущийФайл.ГПС_ТипДокумента) Тогда
		
		Если ТекущийФайл.ГПС_ТипДокумента.Уникальный Или ТекущийФайл.ГПС_ТипДокумента.УстанавливаетсяПрограммно	Тогда
			Возврат Ложь;				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьВозможностьСменыТипа()

&НаКлиенте
Процедура ОбновитьДеревоФайлов()

	ЗаполнитьДеревоФайлов();
	
	ЭлементыДереваФайлов = СписокФайлов.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из ЭлементыДереваФайлов Цикл
		Если Не ЗначениеЗаполнено(СтрокаДерева.Файл) Тогда
			Элементы.СписокФайлов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбновитьДеревоФайлов()

 &НаСервере
Функция ПолучитьЗначениеРеквизита(СсылкаНеОбъект, ИмяРеквизита)

	Возврат СсылкаНеОбъект[ИмяРеквизита];		

КонецФункции // ПолучитьЗначениеРеквизита()

&НаКлиенте
Процедура ПоказатьПоГоду(Команда)
	
	ПозицияРазделителя = Найти(Команда.Имя, "_");
	Если ПозицияРазделителя = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГода = Сред(Команда.Имя, ПозицияРазделителя + 1, СтрДлина(Команда.Имя) - ПозицияРазделителя);
	
	Если СтрокаГода = "Все" Тогда
		ТекущийГодМонитораДоговоров = Неопределено;
	ИначеЕсли СтрокаГода = "БезДаты" Тогда
		ТекущийГодМонитораДоговоров = Дата("00010101");	
	Иначе
		ТекущийГодМонитораДоговоров = Дата(СтрокаГода + "0101");
	КонецЕсли;	
	
	Для Каждого ЭлементГод Из Элементы.ГруппаГоды.ПодчиненныеЭлементы Цикл
		Если ЭлементГод.Имя = "Кнопка_" + СтрокаГода Тогда
			ЭлементГод.Пометка = Истина;
		Иначе
			ЭлементГод.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ГПС_СогласованиеДоговора.ЗаписатьНастройку("ГПС_ТекущийГодМонитораДоговоров", ТекущийГодМонитораДоговоров);
	
	ПерезаполнитьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданиеДоговора" Тогда
		 ПерезаполнитьДерево();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДеревоФайлов" Тогда
		 СписокПриАктивизацииСтроки(Элементы.Список);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаФайла = СписокФайлов.НайтиПоИдентификатору(Строка);
	
	Если ТекущаяСтрокаФайла <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрокаФайла.Файл) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 И Строка <> Неопределено Тогда
		
		СтрокаПриемник = СписокФайлов.НайтиПоИдентификатору(Строка);
		МассивФайлов = Новый Массив;
		Для Каждого СтрокаПереноса Из ПараметрыПеретаскивания.Значение Цикл
			
			ТекущаяСтрокаФайла = СписокФайлов.НайтиПоИдентификатору(СтрокаПереноса);
			Если ЗначениеЗаполнено(ТекущаяСтрокаФайла.Файл) Тогда
				МассивФайлов.Добавить(ТекущаяСтрокаФайла.Файл);	
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписатьПодчиненныеФайлы(МассивФайлов, СтрокаПриемник.Файл);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПодчиненныеФайлы(Файлы, ОсновнойФайл)

	Если ТипЗнч(Файлы) = Тип("Массив") Тогда
		
		НачатьТранзакцию();
		
		Для каждого ФайлМассива Из Файлы Цикл
			ФайлОбъект = ФайлМассива.ПолучитьОбъект();		
		    ФайлОбъект.ОбменДанными.Загрузка = Истина;
			ФайлОбъект.ГПС_ФайлРодитель = ОсновнойФайл;
			ФайлОбъект.Записать();
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Иначе		
		ФайлОбъект = Файлы.ПолучитьОбъект();		
	    ФайлОбъект.ОбменДанными.Загрузка = Истина;
		
		ФайлОбъект.ГПС_ФайлРодитель = ОсновнойФайл;
		ФайлОбъект.Записать();	
	КонецЕсли;

КонецПроцедуры // ЗаписатьПодчиненныеФайлы()

&НаКлиенте
Процедура СписокФайловНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		ТекущаяСтрокаФайла = СписокФайлов.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);	
		Если ТекущаяСтрокаФайла = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрокаФайла.Файл)
		 Или ТекущаяСтрокаФайла.ТипДокумента.Уникальный Или ТекущаяСтрокаФайла.ТипДокумента.УстанавливаетсяПрограммно Тогда
			Выполнение = Ложь;
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ЗаполнитьДеревоФайлов();		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	
	Если ЗначениеЗаполнено(Элементы.СписокФайлов.ВыделенныеСтроки) Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из Элементы.СписокФайлов.ВыделенныеСтроки Цикл
			ВыделенныйЭлементДерева = СписокФайлов.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ЗначениеЗаполнено(ВыделенныйЭлементДерева.Файл) Тогда
				МассивФайлов.Добавить(ВыделенныйЭлементДерева.Файл);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивФайлов.Количество() = 0 Тогда
			Предупреждение("Файлы не выбраны!");
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
		ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;
		
		ГПС_ОбщегоНазначенияКлиент.СоздатьПисьмоВOutlook(Строка(ВыбраннаяСтрока), МассивФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьФайлНаУдаление(Команда)
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда
		Возврат;
	Иначе
		ГПС_ФайловыеФункцииКлиентСервер.УстановитьТипФайла(ТекущиеДанные.Файл, Новый Структура("ТипДокумента", ПредопределенноеЗначение("Справочник.ГПС_ТипыПрикрепленныхДокументов.ФайлыКУдалению")));	
	КонецЕсли;
	
	ОбновитьДеревоФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;	
		
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		//Если Не РольДоступна("ГПС_АдминистрированиеПроцессовСогласования") Тогда
		//	Предупреждение("Прикрепление документов к карточке договора не доступно!");
		//	Возврат;
		//КонецЕсли;
		
		Родитель = ПредопределенноеЗначение("Справочник.ГПС_ТипыПрикрепленныхДокументов.ДокументыСогласования");
	Иначе
		Родитель = ПредопределенноеЗначение("Справочник.ГПС_ТипыПрикрепленныхДокументов.ДокументыПоКонтрагентам");
	КонецЕсли;
	
	НовыйФайл = Неопределено;
	ГПС_РаботаСФайламиКлиент.СоздатьФайл(2, ВыбраннаяСтрока, ЭтаФорма, Истина, , НовыйФайл);
	
	Если Не ЗначениеЗаполнено(НовыйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", ВыбраннаяСтрока);
												
	ПараметрыФормы.Вставить("Родитель",    Родитель);
	ПараметрыФормы.Вставить("ТекущийФайл", НовыйФайл);
	// {{%%%_GPS_Kolodin_19.09.17
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
		ПараметрыФормы.Вставить("ФормаМонитора", Истина);
	КонецЕсли;
	// %%%}}_GPS_Kolodin_19.09.17
	
	ОткрытьФорму("Справочник.Файлы.Форма.ГПС_ФормаПараметровДокумента", ПараметрыФормы, ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваФайла(Команда)
	
	ТекущаяСтрока = Элементы.СписокФайлов.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = СписокФайлов.НайтиПоИдентификатору(ТекущаяСтрока).Файл;
	ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", Новый Структура("Ключ", ВыбраннаяСтрока, ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьФайл(Команда)
	
	ТекущаяСтрока = Элементы.СписокФайлов.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Или ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = СписокФайлов.НайтиПоИдентификатору(ТекущаяСтрока).Файл;
	
	ДанныеФайла = ГПС_РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ВыбраннаяСтрока, 
														Неопределено, УникальныйИдентификатор, Неопределено, Неопределено);
		
	ГПС_РаботаСФайламиКлиент.ОбновитьИзФайлаНаДиске(ДанныеФайла, УникальныйИдентификатор, Истина, Истина);
	
	ЗаполнитьДеревоФайлов();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПовторнуюПроверкуКонтрагента(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;	
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Предупреждение("Необходимо выбрать контрагента!");
	Иначе
		ИзменитьСтатусНаСервере(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьСтатусНаСервере(Контрагент)

	ЗаписьСтатуса = РегистрыСведений.ГПС_СтатусыБезопасностиКонтрагентов.СоздатьМенеджерЗаписи();	
    ЗаписьСтатуса.Период = ТекущаяДата();
	ЗаписьСтатуса.ЗаявкаНаСозданиеКонтрагента = Контрагент;
	ЗаписьСтатуса.Комментарий = "Контрагент был направлен на повторную проверку пользователем: " + Строка(ОбщегоНазначения.ТекущийПользователь());
	//ЗаписьСтатуса.ДатаНапоминания = ДатаНапоминания;
	ЗаписьСтатуса.Статус = Перечисления.ГПС_СтатусыБезопасностиКонтрагентов.ПовторнаяПроверка;
	ЗаписьСтатуса.Записать();

КонецПроцедуры // ИзменитьСтатусНаСервере()

&НаСервереБезКонтекста
Процедура УчастникЭДОНаСервере(Контрагент)
	
	УстановитьПривилегированныйРежим(Истина);
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
	
	КонтрагентОбъект.ГПС_ВозможностьРаботыСЭДО = Не КонтрагентОбъект.ГПС_ВозможностьРаботыСЭДО;
	КонтрагентОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникЭДО(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;	
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Предупреждение("Необходимо выбрать контрагента!");
	Иначе
		УчастникЭДОНаСервере(ВыбраннаяСтрока);
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		ТекущиеДанные.ИндексКартинки = ?(ТекущиеДанные.ИндексКартинки = 0, 2, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВИзбранноеНаСервере(ДоговорКонтрагента)
	
	ТекущийПользователь = ОбщегоНазначения.ТекущийПользователь();
	
	ЗаписьРегистраИзбранных = РегистрыСведений.ГПС_ИзбранныеДоговоры.СоздатьМенеджерЗаписи();
	ЗаписьРегистраИзбранных.Договор 	 = ДоговорКонтрагента;
	ЗаписьРегистраИзбранных.Пользователь = ТекущийПользователь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	1 КАК Поле1
					|ИЗ
					|	РегистрСведений.ГПС_ИзбранныеДоговоры КАК ГПС_ИзбранныеДоговоры
					|ГДЕ
					|	ГПС_ИзбранныеДоговоры.Договор = &Договор
					|	И ГПС_ИзбранныеДоговоры.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Договор", 		ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Пользователь", 	ТекущийПользователь);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ЗаписьРегистраИзбранных.Записать();
	Иначе
		ЗаписьРегистраИзбранных.Удалить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранное(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока).Договор;	
	
	Если ТипЗнч(ВыбраннаяСтрока) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Предупреждение("Необходимо выбрать договор!");
	Иначе
		ДобавитьВИзбранноеНаСервере(ВыбраннаяСтрока);
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.ИндексКартинки = 1 Тогда
		Элементы.Список.ТекущиеДанные.ИндексКартинки = 3;
		Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Картинка  = БиблиотекаКартинок.ГПС_ИзбранноеЧБ;
		Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Заголовок = "Убрать";
	ИначеЕсли Элементы.Список.ТекущиеДанные.ИндексКартинки = 3 Тогда
		Элементы.Список.ТекущиеДанные.ИндексКартинки = 1;
		Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Картинка  = БиблиотекаКартинок.ГПС_Избранное;
		Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Заголовок = "Добавить";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранныеДоговоры(Команда)
	
	ОтображатьИзбранные = Не ОтображатьИзбранные;
	
	ГПС_СогласованиеДоговора.ЗаписатьНастройку("ГПС_ОтобрежениеИзбранныхМонитораДоговоров", ОтображатьИзбранные);
	
	ПерезаполнитьДерево();

	Элементы.ИзбранныеДоговоры.Картинка = ?(ОтображатьИзбранные, БиблиотекаКартинок.ГПС_Избранное, БиблиотекаКартинок.ГПС_ИзбранноеЧБ);
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияПоДоговоруПриИзменении(Элемент)
	
	Элементы.ЗадачиСобытий.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗакрытьДоговор(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока);	
	
	Если ТипЗнч(ВыбраннаяСтрока.Договор) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Предупреждение("Необходимо выбрать договор!");
	Иначе
		ИзменитьСтатусДоговораНаСервере(ВыбраннаяСтрока.Договор, ПредопределенноеЗначение("Перечисление.ГЭС_СтатусыДоговоров.Закрыт"));
		ВыбраннаяСтрока.СтатусДоговора = 2;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДоговорДействует(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДеревоДоговоров.НайтиПоИдентификатору(ТекущаяСтрока);	
	
	Если ТипЗнч(ВыбраннаяСтрока.Договор) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Предупреждение("Необходимо выбрать договор!");
	Иначе
		ИзменитьСтатусДоговораНаСервере(ВыбраннаяСтрока.Договор, ПредопределенноеЗначение("Перечисление.ГЭС_СтатусыДоговоров.Действует"));
		ВыбраннаяСтрока.СтатусДоговора = 1;
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере
Процедура ИзменитьСтатусДоговораНаСервере(ДоговорКонтрагента, СтатусДоговора)

	
	УстановитьПривилегированныйРежим(Истина);
	ДоговорКонтрагентаОбъект = ДоговорКонтрагента.ПолучитьОбъект();
	ДоговорКонтрагентаОбъект.ГЭС_СтатусДоговора = СтатусДоговора;
	ДоговорКонтрагентаОбъект.ОбменДанными.Загрузка = Истина;
	ДоговорКонтрагентаОбъект.Записать();


КонецПроцедуры // ЗакрытьДоговорНаСервере()

